class VideoReviewWidget{constructor(t,e){this.elementId=t,this.videoSrc=e,this.isExpanded=!1,this.formattedTime="00:00",this.audio=!0,this.btnName="Целевое действие",this.isHovered=!1,this.btn={static:{backgroundColor:"#DE0101",color:"#fff",padding:"17px 67px",fontSize:"15px",fontWeight:"500"},hover:{backgroundColor:"#171717",color:"#fff",padding:"17px 67px",fontSize:"15px",fontWeight:"500"}},this.plyrInstance=null}initWidget(){const t=document.getElementById(this.elementId);if(!t)return;const e=document.createElement("video"),i=document.createElement("button");t.appendChild(e),t.appendChild(i),this.plyrInstance=new Plyr(e,{controls:[],clickToPlay:!1}),this.plyrInstance.on("timeupdate",this.onTimeUpdate.bind(this)),this.isExpanded||(this.plyrInstance.muted=!0),i.addEventListener("click",this.stateToggleVideo.bind(this))}stateToggleVideo(){this.isExpanded=!this.isExpanded,this.isExpanded?(this.plyrInstance.currentTime=0,this.plyrInstance.muted=!1):this.plyrInstance.muted=!0}onTimeUpdate(){this.formattedTime=this.formatTime(this.plyrInstance.currentTime)}formatTime(t){const e=Math.floor(t/60),i=Math.floor(t%60);return`${e.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}ToggleMuted(){this.plyrInstance.muted=!this.plyrInstance.muted,this.audio=!this.audio}render(){const t=document.getElementById(this.elementId);if(!t)return;t.innerHTML=`\n      <div class="reviews-video ${this.isExpanded?"expanded-video":"collapses"}">\n        <div class="controls-video" ${this.isExpanded?"":'style="display:none;"'}>\n          <div class="reviews_videoTime">${this.formattedTime}</div>\n          <div class="close-video toggleState_btn">\n            <img src="@/assets/img/close.svg" alt="Hidden reviews">\n          </div>\n          <div class="toggle-audio toggleState_btn">\n            <img src="${this.audio?"@/assets/img/audio.svg":"@/assets/img/no-audio.svg"}" alt="${this.audio?"Audio reviews":"Remove audio reviews"}">\n          </div>\n        </div>\n        <video src="${this.videoSrc}" playsinline autoplay audio></video>\n        <div class="reviews_btnAction" ${this.isExpanded?"":'style="display:none;"'}>\n          <button \n            type="button"\n            style="${this.isHovered?this.btn.hover:this.btn.static}"\n            onmouseover="this.isHovered = true"\n            onmouseout="this.isHovered = false"\n          >\n            ${this.btnName}\n          </button>\n        </div>\n      </div>\n    `;const e=t.querySelector(".close-video");e&&e.addEventListener("click",this.stateToggleVideo.bind(this));const i=t.querySelector(".toggle-audio");i&&i.addEventListener("click",this.ToggleMuted.bind(this))}}